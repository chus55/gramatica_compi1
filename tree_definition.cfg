compilation-unit-node:
	-> using-node[] #DONE
	-> namespace-node[] #DONE
	-> type-declaration[] #DONE

using-node:
	-> namespace-name

namespace-node:
	-> using-node[] 
	-> namespace-node[]
	-> type-declaration[]
	

type-declaration-node:
	-> class-node
	-> enum-definition-node
	-> interface-node

enum-definition-node:
	-> encapsulation-modifier | encapsulation-node
	-> identifier | identifier-node
	-> enum-node[]
#SEMANTICO: expression-node debe ser un int, o un  literal con int casting
enum-node:
	-> identifier | identifier-node
	-> assignment | expression-node


FieldNode:
	->	encapsulation
	-> 	modifier
	-> 	identifier
	->	assignment : AssignmentNode

AssignmentNode:
	->	ExpressionNode
	->	List<RowAssignment>

RowAssignment:
	->	leftOperand : Identifier
	->	rightOperand: ExpressionNode

abstract StatementNode
	-> LocalVariableNode
	-> EmbeddedStatementNode abstract
		-> StatementExpressionNode
		-> IfStatementNode
		-> SwitchStatementNode
		-> ForStatementNode
		-> WhileStatementNode
		-> DoStatementNode
		-> ForeachStatementNode
		-> JumpStatementNode
		-> BlockStatementNode
			-> List<StatementNode>

WhileStatementNode:
	-> Conditional 	: 	ExpressionNode
	-> Body			:	EmbeddedStatementNode

DoStatementNode:
	-> Conditional 	: 	ExpressionNode
	-> Body			:	EmbeddedStatementNode

ForStatementNode:
	-> InitializerExpression : List<StatementNode>
	-> ConditionalExpression
	-> IncrementExpression

ForeachStatementNode:
	-> LocalVariable 	: 	AssignableNode
	-> Assignment 		:	ExpressionNode

JumpStatementNode:
	-> Identifier 	: IdenfierNode
	-> OptionalExpression	: ExpressionNode

IfStatementNode:
	-> Conditional 	: ExpressionNode
	-> Body			: EmbeddedStatementNode
	-> Else			: ElseNode

ElseNode:
	-> Body	: EmbeddedStatementNode

SwitchStatementNode:
	-> ExpressionToEval	:	ExpressionNode
	-> Cases 			: 	List<CaseExpressionNode>

CaseExpressionNode:
	-> ToCompareValue	:	CaseNode[]
	-> Body				: 	StatementNode[]

CaseNode:
	-> Label : Token
	-> Value : ExpressionNode

ExpressionNode : abstract
	-> UnaryExpressionNode: abstract
		-> ExpressionUnaryNode
			-> UnaryOperator 	: Token
			-> Expression 		: UnaryExpressionNode
		-> CastingExpressionNode
			-> TargetType	: 	TypeDeclarationNode
			-> Expression 	:	PrimaryExpression
		-> PrimaryExpressionNode: abstract
			-> InstanceExpressionNode
			-> AccessMemoryExpressionNode
			-> FunctionCallExpressionNode
			-> ArrayAccessExpressionNode
			-> PostAdditiveExpressionNode
			-> ParenthesizedExpressionNode
			-> LiteralExpressionNode
			-> ReferenceAccessNode

ArrayAccessNode

InstanceExpressionNode:
	Atributos:
		>Instance
;	Consideraciones: 
;		1. Todos las producciones "optional" deben tener una produccion "EPSILON"
;		2. __(Done)__ MÃºltiples clases, interfaces, enums fuera de namespace 


code:
	| compilation-unit

compilation-unit:
	| optional-using-directive optional-namespace-member-declaration
	| optional-namespace-member-declaration

optional-using-directive:
	| using-directive
	| EPSILON

optional-namespace-member-declaration:
	| namespace-member-declaration
	| EPSILON

type-declaration-list:
	| type-declaration type-declaration-list
	| EPSILON

using-directive:
	| "using" identifier identifier-attribute ';' optional-using-directive

namespace-member-declaration:
	| namespace-declaration optional-namespace-member-declaration
	| type-declaration-list optional-namespace-member-declaration

type-declaration:
	| encapsulation-modifier group-declaration

namespace-declaration:
	| "namespace" identifier identifier-attribute namespace-body

namespace-body:
	| '{' optional-using-directive optional-namespace-member-declaration '}'
	
identifier-attribute:
	| '.' identifier identifier-attribute
	| EPSILON

group-declaration:
	| class-declaration
    | interface-declaration
    | enum-declaration

class-declaration:
	| class-modifier "class" identifier inheritance-base class-body optional-body-end

#SEMANTIC: validar que no pueden haber private, ni protected enums afuera de un namespace.
encapsulation-modifier:
	| "public"
	| "protected"
	| "private"
	| EPSILON

class-modifier:
	| "abstract"
	| EPSILON

inheritance-base:
	| ':' identifiers-list
	| EPSILON

class-body:
	| '{' optional-class-member-declaration-list '}'

optional-class-member-declaration-list:
	| class-member-declaration optional-class-member-declaration-list
	| EPSILON

class-member-declaration: 
	| encapsulation-modifier class-member-declaration-options

; SEMANTIC: void solo puede ir en un method. validar constructor-declaration con look_ahead
; SEMANTIC: los fields solo pueden llevar static. Y no ninguno demas de optional-modifier
class-member-declaration-options:
    | optional-modifier type-or-void identifier field-or-method
	| constructor-declaration

field-or-method:
    | field-declaration
	| method-declaration

//SEMANTIC: Constructor no puede terminar con ;
constructor-declaration:
	| constructor-declarator maybe-empty-block

constructor-declarator:
	| identifier '(' fixed-parameters ')' constructor-initializer

constructor-initializer:
	| ':' "base" '(' argument-list ')'
	| EPSILON

optional-body-end:
	| ';'
	| EPSILON

identifiers-list:
	| identifier identifiers-list-p

identifiers-list-p:
	| ',' identifier identifiers-list-p
	| EPSILON


===================================================

optional-statement-list:
	| statement-list
	| EPSILON

statement-list: 
	| statement optional-statement-list 

statement:
	| local-variable-declaration ';'
	| embedded-statement

embedded-statement:
	| maybe-empty-block
	| statement-expression ';'
	| selection-statement
	| iteration-statement
	| jump-statement ';'

iteration-statement:
	| while-statement
	| do-statement
	| for-statement
	| foreach-statement

maybe-empty-block:
	| '{' optional-statement-list '}'
	| ';'

while-statement:
	| "while" '(' expression ')' embedded-statement

do-statement: 
	| "do" embedded-statement "while" '(' expression ')' ';'

for-statement:
	| "for" '(' optional-for-initializer ';' optional-expression ';' optional-statement-expression-list ')' embedded-statement

foreach-statement:
	| "foreach" '(' type identifier "in" expression ')' embedded-statement

jump-statement:
	| "break"
	| "continue"
	| "return" optional-expression

optional-statement-expression-list:
	| statement-expression-list
	| EPSILON

statement-expression-list:
	| statement-expression statement-expression-list-p

statement-expression-list-p:
	| ',' statement-expression statement-expression-list-p
	| EPSILON

optional-expression: 
	| expression
	| EPSILON

optional-for-initializer:
	| local-variable-declaration
	| statement-expression-list
	| EPSILON

selection-statement:
	| if-statement
	| switch-statement

switch-statement:
	| "switch" '(' expression ')' '{' optional-switch-section-list '}'

optional-switch-section-list:
	| switch-label-list statement-list optional-switch-section-list
	| EPSILON

switch-label-list:
	| switch-label switch-label-list-p

switch-label-list-p:
	| switch-label-list
	| EPSILON
	
switch-label:
	| "case" expression ':'
	| "default" ':'

if-statement:
	| "if" '(' expression ')' embedded-statement optional-else-part

optional-else-part:
	| else-part
	| EPSILON

else-part:
	| "else" embedded-statement	

statement-expression:
	| optional-unary-expression primary-expression statement-expression-p

optional-unary-expression:
    | expression-unary-operator unary-expression
    | '(' type ')'
    | EPSILON

local-variable-declaration:
	| type-or-var variable-declarator-list	

fixed-parameter:
	| type identifier

fixed-parameters:
	| fixed-parameter fixed-paramaters-p
	| EPSILON

fixed-parameters-p:
	| ',' fixed-parameter fixed-parameters-p
	| EPSILON

type:
	| "int"
	| "char"
	| "string"
	| "bool"
	| "float"
	| identifier

type-or-var:
	| type
	| "var"

type-or-void:
	| type
	| "void"

argument-list:
	| expression argument-list-p
	| EPSILON

argument-list-p:
	| ',' expression argument-list-p
	| EPSILON

===============================================================

expression:
    | conditional-expression

conditional-expression:
	| null-coalescing-expression conditional-expression-p

conditional-expression-p:
	| '?' expression ':' expression 
	| EPSILON

null-coalescing-expression:
	| conditional-or-expression null-coalescing-expression-p

null-coalescing-expression-p:
	| "??" null-coalescing-expression
	| EPSILON

conditional-or-expression:
	| conditional-and-expression conditional-or-expression-p

conditional-or-expression-p:
	| "||" conditional-and-expression conditional-or-expression-p 
	| EPSILON

conditional-and-expression:
	| inclusive-or-expression conditional-and-expression-p

conditional-and-expression-p:
	| "&&" inclusive-or-expression conditional-and-expression-p
	| EPSILON 

inclusive-or-expression:
	| exclusive-or-expression inclusive-or-expression-p

inclusive-or-expression-p:
	| "|" exclusive-or-expression inclusive-or-expression-p
	| EPSILON

exclusive-or-expression:
	| and-expression exclusive-or-expression-p

exclusive-or-expression-p:
	| "^" and-expression exclusive-or-expression-p
	| EPSILON 

and-expression:
	| equality-expression and-expression-p

and-expression-p:
	| "&" equality-expression and-expression-p
	| EPSILON

equality-expression:
	| relational-expression equality-expression-p

equality-expression-p:
	| expression-equality-operator relational-expression equality-expression-p
	| EPSILON

relational-expression:
	| shift-expression relational-expression-p

relational-expression-p:
	| expression-relational-operator shift-expression relational-expression-p
	| is-as-operators type relational-expression-p
	| EPSILON 

shift-expression:
	| additive-expression shift-expression-p

shift-expression-p:
	| expression-shift-operator additive-expression shift-expression-p
	| EPSILON

additive-expression:
	| multiplicative-expression additive-expression-p

additive-expression-p:
	| additive-operators multiplicative-expression additive-expression-p
	| EPSILON

multiplicative-expression:
	| unary-expression multiplicative-expression-factorized

multiplicative-expression-factorized:
	| assignment-operator expression multiplicative-expression-p
	| multiplicative-expression-p

multiplicative-expression-p:
	| multiplicative-operators unary-expression multiplicative-expression-p
	| EPSILON	

is-as-operators:
	| "is"
	| "as"

multiplicative-operators:
	| '*'
	| '/'
	| '%'

additive-operators:
	| '+'
	| '-'
expression-shift-operator: 
	| "<<"
	| ">>"

expression-equality-operator:
	| "=="
	| "!="

expression-relational-operator:
	| '<'
	| '>'
	| "<="
	| ">="

assignment-operator:
	| '='
	| "+="
	| "-="
	| "*="
	| "/="
	| "%="
	| "&="
	| "|="
	| "^="
	| "<<="
	| ">>="

unary-expression: //look_ahead dos veces PROGRAMATICALLY
	| expression-unary-operator unary-expression
	| '(' type ')' primary-expression
	| primary-expression

expression-unary-operator:
	| '+'
	| '-'
	| increment-decrement
	| "!"
	| "~"
	| "*"

# REVISAR 'BASE'
primary-expression:
    | "new" instance-expression primary-expression-p
	| literal primary-expression-p
	| identifier primary-expression-p
	| '(' expression ')' primary-expression-p
	| "this" primary-expression-p

instance-expression:
	| type instance-expression-factorized

instance-expression-factorized:
	| '[' instance-expression-factorized-p 
	| '(' argument-list ')'

instance-expression-factorized-p:
	| expression-list ']' optional-rank-specifier-list optional-array-initializer
	| rank-specifier-list optional-array-initializer

primary-expression-p:
    | '.' identifier optional-funct-or-array-call primary-expression-p
    | increment-decrement primary-expression-p 
    | EPSILON 

optional-funct-or-array-call:
	| '(' argument-list ')'
	| optional-array-access-list 
	| EPSILON

optional-array-access-list:
	| '[' expression-list ']' optional-array-access-list
	| EPSILON

literal:
	| int-literal
	| char-literal
	| float-literal
	| string-literal
	| "true"
	| "false"

expression-list:
	| expression optional-expression-list

optional-expression-list:
	| expression-list
	| EPSILON

rank-specifier-list: 
	| rank-specifier optional-rank-specifier-list

optional-rank-specifier-list:
	| '[' rank-specifier-list
	| EPSILON 	

rank-specifier:
	| optional-comma-list ']'

optional-comma-list:
	| comma-list
	| EPSILON

comma-list: 
	| ',' optional-comma-list

;SEMANTIC: Validar que si la clase es abstract, el metodo no debe llevar cuerpo.
method-declaration:
	| '(' fixed-parameters ')' maybe-empty-block

interface-method-header:
	| type-or-void identifier '(' fixed-parameters ')' 

field-declaration: 
	| variable-assigner variable-declarator-list-p ';'

variable-declarator-list:
	| identifier variable-assigner variable-declarator-list-p

variable-assigner:
	| '=' variable-initializer
	| EPSILON

variable-declarator-list-p:
	| ',' variable-declarator-list
	| EPSILON

variable-initializer:
	| expression
	| array-initializer

#SEMANTICO: Validar que static solo puede estar en field. Virtual, override y abstract, unicamente en method.
optional-modifier:
    | "static"
    | "virtual"
    | "override"
    | "abstract"
    | EPSILON

interface-declaration: 
	| "interface" identifier inheritance-base interface-body optional-body-end

interface-body:
	| '{' interface-method-declaration-list '}'

interface-method-declaration-list:
	| interface-method-header ';' interface-method-declaration-list
	| EPSILON

enum-declaration: 
	| "enum" identifier enum-body optional-body-end

enum-body:
	| '{' optional-assignable-identifiers-list '}'

optional-assignable-identifiers-list:
	| identifier assignment-options
	| EPSILON

assignment-options:
	| optional-assignable-identifiers-list-p
	| '=' expression optional-assignable-identifiers-list-p

optional-assignable-identifiers-list-p:
	| ',' optional-assignable-identifiers-list
	| EPSILON

optional-array-initializer:
	| array-initializer
	| EPSILON

array-initializer: 
	| '{' optional-variable-initializer-list '}'

optional-variable-initializer-list:
	| variable-initializer-list
	| EPSILON

variable-initializer-list:
	| variable-initializer variable-initializer-list-p

variable-initializer-list-p:
	| ',' variable-initializer-list
	| EPSILON

increment-decrement:
	| "++"
	| "--"

statement-expression-p:
	| '(' argument-list ')'
	| increment-decrement
    | EPSILON
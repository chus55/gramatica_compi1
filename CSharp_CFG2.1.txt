/*
	Consideraciones: 
		1. Todos las producciones "optional" deben tener una produccion "EPSILON"

*/

code:
	| compilation-unit

compilation-unit:
	| optional-using-directive
	| optional-namespace-member-declaration

using-directive:
	| "using" identifier identifier-attribute ';' optional-using-directive

optional-using-directive:
	| using-directive
	| EPSILON

identifier-attribute:
	| '.' identifier identifier-attribute
	| EPSILON

namespace-member-declaration:
	| namespace-declaration optional-namespace-member-declaration
	| type-declaration

optional-namespace-member-declaration:
	| namespace-member-declaration
	| EPSILON

namespace-declaration:
	| "namespace" identifier identifier-attribute namespace-body

namespace-body:
	| '{' optional-using-directive optional-namespace-member-declaration '}'

type-declaration:
	| class-declaration
    | interface-declaration
    | enum-declaration

class-declaration:
	| class-modifier "class" identifier inheritance-base class-body optional-body-end

inheritance-base:
	| ':' identifiers-list
	| EPSILON

class-body:
	| '{' class-member-declaration '}'

class-member-declaration:
	| field-declaration
	| method-declaration
	| constructor-declaration

constructor-declaration:
	| constructor-modifier constructor-declarator maybe-empty-block

constructor-declarator:
	| identifier '(' fixed-parameters ')' constructor-initializer

constructor-initializer:
	| ':' "base" '(' argument-list ')'
	| EPSILON

constructor-modifier:
    | "public"
    | "protected"
    | "private"
    | EPSILON

optional-body-end:
	| ';'
	| EPSILON

optional-identifiers-list:
	| identifiers-list
	| EPSILON

identifiers-list:
	| identifier identifiers-list-p

identifiers-list-p:
	| ',' identifier identifiers-list-p
	| EPSILON

maybe-empty-block:
	| '{' optional-statement-list '}'
	| ';'

optional-statement-list: 
	| statement-list
	| EPSILON

statement-list:  
	| statement optional-statement-list 

statement:
	| local-variable-declaration ';'
	| embedded-statement

embedded-statement:
	| maybe-empty-block
	| statement-expression ';'
	| selection-statement
	| iteration-statement
	| jump-statement

iteration-statement:
	| while-statement
	| do-statement
	| for-statement
	| foreach-statement

while-statement:
	| "while" '(' expression ')' embedded-statement

do-statement: 
	| "do" embedded-statement "while" '(' expression ')' ';'

for-statement:
	| "for" '(' optional-for-initializer ';' optional-expression ';' optional-statement-expression-list ')' embedded-statement

foreach-statement:
	| "foreach" '(' type identifier "in" expression ')' embedded-statement

jump-statement:
	| "break" ';'
	| "continue" ';'
	| "return" optional-expression ';'

optional-statement-expression-list:
	| statement-expression-list
	| EPSILON

statement-expression-list:
	| statement-expression statement-expression-list-p

statement-expression-list-p:
	| ',' statement-expression statement-expression-list-p
	| EPSILON

optional-expression:
	| expression
	| EPSILON

optional-for-initializer:
	| local-variable-declaration
	| statement-expression-list
	| EPSILON

selection-statement:
	| if-statement
	| switch-statement

switch-statement:
	| "switch" '(' expression ')' '{' optional-switch-section-list '}'

optional-switch-section-list:
	| switch-label-list statement-list optional-switch-section-list
	| EPSILON

switch-label-list:
	| switch-label switch-label-list-p

switch-label-list-p:
	| switch-label-list
	| EPSILON
	
switch-label:
	| "case" expression ':'
	| "default" ':'

if-statement:
	| "if" '(' expression ')' embedded-statement optional-else-part

optional-else-part:
	| else-part
	| EPSILON

else-part:
	| "else" embedded-statement	

statement-expression: 
	| primary-expression '(' argument-list ')'
	| "new" type '(' argument-list ')'
	| unary-expression assignment-expression expression
	| primary-expression increment-decrement
	| increment-decrement primary-expression

local-variable-declaration:
	| type variable-declarator-list	

fixed-parameter:
	| type identifier

fixed-parameters:
	| fixed-parameter fixed-paramaters-p
	| EPSILON

fixed-parameters-p:
	| ',' fixed-parameter fixed-parameters-p
	| EPSILON

type:
	| "int"
	| "char"
	| "string"
	| "bool"
	| "float"
	| id

type-or-var:
	| type
	| "var"

type-or-void:
	| type
	| "void"

argument-list:
	| expression argument-list-p
	| EPSILON

argument-list-p:
	| ',' expression argument-list-p
	| EPSILON

expression:
    | unary-expression factorized-main-expression
	
factorized-main-expression:
    | expression-p
	| assignment-operator expression expression-p

expression-p:
    | '?' expression ':' expression expression-p
    | "??" expression expression-p 
	| "||" expression expression-p
	| "&&" expression expression-p
	| '|' expression expression-p
	| '^' expression expression-p
	| '&' expression expression-p
	| expression-equality-operator expression expression-p
	| expression-relational-operator expression expression-p
	| "is" built-in-type expression-p
	| expression-shift-operator expression expression-p
	| '+' expression expression-p
	| '-' expression expression-p
	| '*' expression expression-p
	| '/' expression expression-p
	| '%' expression expression-p
    | EPSILON

expression-shift-operator: 
	| "<<"
	| ">>"

expression-equality-operator:
	| "=="
	| "!="

expression-relational-operator:
	| '<'
	| '>'
	| "<="
	| ">="
	| "is"
	| "as"

assignment-operator:
	| '='
	| "+="
	| "-="
	| "*="
	| "/="
	| "%="
	| "&="
	| "|="
	| "^="
	| "<<="
	| ">>="

unary-expression:
	| expression-unary-operator unary-expression
	| '(' type ')' unary-expression
	| primary-expression

expression-unary-operator:
	| '+'
	| '-'
	| "++"
	| "--"
	| "!"
	| "~"
	| "*"

// REVISAR 'BASE'
primary-expression:
    | "new" instance-expression primary-expression-p
	| literal primary-expression-p
	| identifier primary-expression-p
	| '(' expression ')' primary-expression-p
	| "this" primary-expression-p

instance-expression:
    | type '[' expression-list ']' optional-rank-specifier-list optional-array-initializer
	| array-type array-initializer
    | type '(' argument-list ')'

primary-expression-p:
    | '.' identifier primary-expression-p
	| '(' argument-list ')' primary-expression-p
	| '[' expression-list ']' primary-expression-p
    | increment-decrement primary-expression-p
    | EPSILON

literal:
	| int-literal
	| char-literal
	| float-literal
	| string-literal
	| "true"
	| "false"

expression-list:
	| expression optional-expression-list

optional-expression-list:
	| expression-list
	| EPSILON

array-type:
	| type rank-specifier-list

rank-specifier-list: 
	| rank-specifier optional-rank-specifier-list

optional-rank-specifier-list:
	| rank-specifier-list
	| EPSILON 	

rank-specifier:
	| '[' optional-comma-list ']'

optional-comma-list:
	| comma-list
	| EPSILON

comma-list: 
	| ',' optional-comma-list

method-declaration:
	| method-header maybe-empty-block

method-header:
	| method-modifier type-or-void identifier '(' fixed-parameters ')' 

method-modifier:
    | "public"
    | "protected"
    | "private"
    | "static"
    | "virtual"
    | "override"
    | "abstract"
    | EPSILON

field-declaration: 
	| field-modifier type-or-var variable-declarator-list ';'

variable-declarator-list:
	| identifier variable-assigner variable-declarator-list-p

variable-assigner:
	| '=' variable-initializer
	| EPSILON

variable-declarator-list-p:
	| ',' variable-declarator-list
	| EPSILON

variable-initializer:
	| expression
	| array-initializer

field-modifier:
    | "public"
    | "protected"
    | "private"
    | "static"
    | EPSILON

interface-declaration: 
	| interface-modifier "interface" identifier inheritance-base interface-body optional-body-end

interface-body:
	| '{' interface-method-declaration-list '}'

interface-method-declaration-list:
	| method-header ';' interface-method-declaration-list
	| EPSILON

interface-modifier:
    | "public"
    | "protected"
    | "private"
    | EPSILON

enum-declaration: 
	| enum-modifier "enum" identifier enum-body optional-body-end

enum-body:
	| '{' optional-identifiers-list '}'

enum-modifier:
    | "public"
    | "protected"
    | "private"
    | EPSILON

optional-array-initializer:
	| array-initializer
	| EPSILON

array-initializer: 
	| '{' optional-variable-initializer-list '}'

optional-variable-initializer-list:
	| variable-initializer-list
	| EPSILON

variable-initializer-list:
	| variable-initializer variable-initializer-list-p

variable-initializer-list-p:
	| ',' variable-initializer-list
	| EPSILON


increment-decrement:
	| "++"
	| "--"
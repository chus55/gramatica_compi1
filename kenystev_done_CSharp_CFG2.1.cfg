compilation-unit:
	| optional-using-directive optional-namespace-member-declaration
	| optional-namespace-member-declaration
    | EPSILON

optional-using-directive:
	| using-directive
	| EPSILON

optional-namespace-member-declaration:
	| namespace-member-declaration
	| EPSILON

using-directive:
	| "using" identifier identifier-attribute ';' optional-using-directive

namespace-member-declaration:
	| namespace-declaration optional-namespace-member-declaration
	| type-declaration-list


identifier-attribute:
	| '.' identifier identifier-attribute
	| EPSILON

type-declaration-list:
	| type-declaration type-declaration-list
	| EPSILON

namespace-declaration:
	| "namespace" identifier identifier-attribute namespace-body

type-declaration:
	| encapsulation-modifier group-declaration

encapsulation-modifier:
	| "public"
	| "protected"
	| "private"
	| EPSILON

namespace-body:
	| '{' optional-using-directive optional-namespace-member-declaration '}'

group-declaration:
	| class-declaration
    | interface-declaration
    | enum-declaration

class-declaration:
	| class-modifier "class" identifier inheritance-base class-body optional-body-end

interface-declaration: 
	| "interface" identifier inheritance-base interface-body optional-body-end

enum-declaration: 
	| "enum" identifier enum-body optional-body-end

inheritance-base:
	| ':' identifiers-list
	| EPSILON

class-body:
	| '{' optional-class-member-declaration-list '}'

optional-class-member-declaration-list:
	| class-member-declaration optional-class-member-declaration-list
	| EPSILON

optional-body-end:
	| ';'
	| EPSILON

identifiers-list:
	| identifier identifiers-list-p

identifiers-list-p:
	| ',' identifier identifiers-list-p
	| EPSILON

enum-body:
	| '{' optional-assignable-identifiers-list '}'

optional-assignable-identifiers-list:
	| identifier assignment-options
	| EPSILON

assignment-options:
	| optional-assignable-identifiers-list-p
	| '=' expression optional-assignable-identifiers-list-p
	| EPSILON

optional-assignable-identifiers-list-p:
	| ',' optional-assignable-identifiers-list
	| EPSILON

interface-body:
	| '{' interface-method-or-constructor-declaration-list '}'

interface-method-or-constructor-declaration-list:
	| interface-method-header ';' interface-method-or-constructor-declaration-list
	| EPSILON

interface-method-header:
	| type-or-void identifier '(' fixed-parameters ')' 

fixed-parameter:
	| type identifier

fixed-parameters:
	| fixed-parameter fixed-paramaters-p
	| EPSILON

fixed-parameters-p:
	| ',' fixed-parameter fixed-parameters-p
	| EPSILON

class-member-declaration: 
	| encapsulation-modifier class-member-declaration-options

; SEMANTIC: void solo puede ir en un method.
; SEMANTIC: optional-modifier no puede ir en contructor ni en un field
; SEMANTIC: solo un constructor puede llevar : "base" '(' argument-list ')'
class-member-declaration-options:
    | optional-modifier type-or-void identifier field-or-method-or-constructor

; SEMANTICO: Validar que static solo puede estar en field. Virtual, override y abstract, unicamente en method.
optional-modifier:
    | "static"
    | "virtual"
    | "override"
    | "abstract"
    | EPSILON

constructor-declaration:
	| constructor-declarator maybe-empty-block

field-or-method-or-constructor:
    | field-declaration
	| method-or-constructor-declaration

; SEMANTIC: Validar que si la clase es abstract, el metodo no debe llevar cuerpo.
; SEMANTIC: solo un constructor puede llevar : "base" '(' argument-list ')'
method-or-constructor-declaration:
	| '(' fixed-parameters ')' constructor-initializer maybe-empty-block

field-declaration: 
	| variable-assigner variable-declarator-list-p ';'

constructor-initializer:
	| ':' "base" '(' argument-list ')'
	| EPSILON

;eliminada
constructor-declarator:
	| identifier '(' fixed-parameters ')' constructor-initializer
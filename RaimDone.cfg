code:
	| compilation-unit

compilation-unit:
	| optional-using-directive optional-namespace-member-declaration
	| optional-namespace-member-declaration

optional-using-directive:
	| using-directive
	| EPSILON

using-directive:
	| "using" identifier identifier-attribute ';' optional-using-directive

identifier-attribute:
	| '.' identifier identifier-attribute
	| EPSILON

optional-namespace-member-declaration:
	| namespace-member-declaration
	| EPSILON

type-declaration-list:
	| type-declaration type-declaration-list
	| EPSILON

namespace-member-declaration:
	| namespace-declaration optional-namespace-member-declaration
	| type-declaration-list optional-namespace-member-declaration

type-declaration:
	| encapsulation-modifier group-declaration

namespace-declaration:
	| "namespace" identifier identifier-attribute namespace-body

namespace-body:
	| '{' optional-using-directive optional-namespace-member-declaration '}'

group-declaration:
	| class-declaration
    | interface-declaration
    | enum-declaration

class-declaration:
	| class-modifier "class" identifier inheritance-base class-body optional-body-end

#SEMANTIC: validar que no pueden haber private, ni protected enums afuera de un namespace.
encapsulation-modifier:
	| "public"
	| "protected"
	| "private"
	| EPSILON

class-modifier:
	| "abstract"
	| EPSILON

inheritance-base:
	| ':' identifiers-list
	| EPSILON

class-body:
	| '{' optional-class-member-declaration-list '}'

enum-declaration: 
	| "enum" identifier enum-body optional-body-end

enum-body:
	| '{' optional-assignable-identifiers-list '}'

optional-assignable-identifiers-list:
	| identifier assignment-options
	| EPSILON

optional-assignable-identifiers-list-p:
	| ',' optional-assignable-identifiers-list
	| EPSILON

assignment-options:
	| optional-assignable-identifiers-list-p
	| '=' expression optional-assignable-identifiers-list-p

interface-declaration: 
	| "interface" identifier inheritance-base interface-body optional-body-end

interface-body:
	| '{' interface-method-declaration-list '}'

interface-method-declaration-list:
	| interface-method-header ';' interface-method-declaration-list
	| EPSILON

interface-method-header:
	| type-or-void identifier '(' fixed-parameters ')' 

fixed-parameter:
	| type identifier

fixed-parameters:
	| fixed-parameter fixed-paramaters-p
	| EPSILON

fixed-parameters-p:
	| ',' fixed-parameter fixed-parameters-p
	| EPSILON

type:
	| "int"
	| "char"
	| "string"
	| "bool"
	| "float"
	| identifier

type-or-var:
	| type
	| "var"

type-or-void:
	| type
	| "void"

optional-body-end:
	| ';'
	| EPSILON

optional-class-member-declaration-list:
	| class-member-declaration optional-class-member-declaration-list
	| EPSILON

class-member-declaration: 
	| encapsulation-modifier class-member-declaration-options

; SEMANTIC: void solo puede ir en un method.
class-member-declaration-options:
    | optional-modifier type-or-void class-member-declaration-options-p

class-member-declaration-options-p:
	| identifier field-or-method-declaration;
	| constructor-declaration

field-or-method-declaration:
    | field-declaration
	| method-declaration

constructor-declaration:
	| constructor-declarator maybe-empty-block

constructor-declarator:
	| '(' fixed-parameters ')' constructor-initializer

constructor-initializer:
	| ':' "base" '(' argument-list ')'
	| EPSILON

identifiers-list:
	| identifier identifiers-list-p

identifiers-list-p:
	| ',' identifier identifiers-list-p
	| EPSILON

;SEMANTIC: Validar que si la clase es abstract, el metodo no debe llevar cuerpo.
method-declaration:
	| '(' fixed-parameters ')' maybe-empty-block

field-declaration: 
	| variable-assigner variable-declarator-list-p ';'

variable-declarator-list:
	| identifier variable-assigner variable-declarator-list-p

variable-assigner:
	| '=' variable-initializer
	| EPSILON

variable-declarator-list-p:
	| ',' variable-declarator-list
	| EPSILON


#SEMANTICO: Validar que static solo puede estar en field. Virtual, override y abstract, unicamente en method.
optional-modifier:
    | "static"
    | "virtual"
    | "override"
    | "abstract"
    | EPSILON

